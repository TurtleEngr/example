.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2025-01-11" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
sshagent \- setup the ssh agent process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    . sshagent [\-h] [\-s] [\-k] [\-x] [pKey ...]
\&
\&    cgAgentOwner \- user name. Default: $USER
\&
\&    For online help page, go to:
\&    https://github.com/TurtleEngr/my\-utility\-scripts/blob/develop/doc/sshagent.md
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Using ssh-agent is a lot more secure than using a passwordless ssh
key. If you use passwordless keys, you are following a very bad
pattern, which could lead to large security issues.
.PP
This sshagent script is a wrapper for ssh-agent and ssh-add to make it
easier to setup and use a ssh-agent. It only starts an agent process
if one isn't already running, and it saves the \s-1PID\s0 env. var. values
for use by scripts.
.PP
See the \s-1EXAMPLES\s0 section for how to use this script.
.PP
If an agent is found, then the env. var. are set, the pKeys are added,
then listed.  If an agent is not found, all other agents are killed,
and a new agent is initialized, the pKeys are added, and the
env. var. are set.
.PP
If \-s is used (no pKeys) and an agent is running, then env. vars. are
set to use the agent. If an agent is not running, then the agent
related env. vars. are unset. \-s is commonly used in cron job scripts.
.PP
If \-k is used (no pKeys), then all ssh-agent will be killed.
.PP
If cgAgentOwner env. is set, then that will be used instead of \f(CW$USER\fR,
to find the sshagent.env file.  This is only useful for scripts that
are run with the \*(L"root\*(R" user. This is only useful with the \-s option,
after agent is started as a regular user.
.PP
If root user and cgAgentOwner is not set, cgAgentOwner will be set
to \s-1SUDO_USER\s0 if \s-1SUDO_USER\s0 is defined.
.PP
If any Errors messages are output, that means the script has done
nothing. Correct the error and try again.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
Output full help.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Set env. var. to use an already running agent, and list the keys.
If an agent is not running an Error message will be output.
.IP "\fB\-k\fR" 4
.IX Item "-k"
Kill all agents owned by the current cgAgentOwner, i.e. \f(CW$USER\fR.
.IP "\fB\-x\fR" 4
.IX Item "-x"
Increment gpDebug level. Default: 0
.IP "\fBpKey ...\fR" 4
.IX Item "pKey ..."
Start a new ssh-agent if one is not running. Add one or more keys to
the agent.
.Sp
If a pKey is not found, the script will try prepending the key with
\&\*(L"$HOME/.ssh/\*(R". If that is not found, the script will stop with an
error.
.SH "ERRORS"
.IX Header "ERRORS"
.SS "Env and option Errors"
.IX Subsection "Env and option Errors"
.Vb 6
\&    Error: sshagent is not \*(Aqsourced\*(Aq [LINENO]
\&    Error: No options were found [LINENO]"
\&    Error: Unknown option: OPTARG [LINENO]
\&    Error: Missing USER env. var. [LINENO]
\&    Error: Missing HOME env. var. [LINENO]
\&    Error: Missing program: PROG [LINENO]
.Ve
.SS "Directory Errors"
.IX Subsection "Directory Errors"
.Vb 1
\&    Error: HOME dir is not writable [LINENO]
.Ve
.PP
This could be caused by cgAgentOwner being set to an unknown user.
.PP
.Vb 1
\&    Error: $cgEnvDir is not writable or is missing [LINENO]
.Ve
.PP
This could be caused by cgAgentOwner being set to a user that has no
~/.ssh/ dir.
.PP
.Vb 2
\&    Error: with chown [LINENO]"
\&    Error: with chmod [LINENO]"
.Ve
.PP
The attempt to change the owner and permissions on the cgEnvDir
failed. The dir and files should \s-1ONLY\s0 have \*(L"user\*(R" read/write
permissions.
.PP
.Vb 1
\&    Error: Not found: KEY [LINENO]"
.Ve
.PP
A \s-1KEY\s0 was not found, even after prepending with \*(L"$HOME/.ssh/\*(R"
.SS "\-s Errors"
.IX Subsection "-s Errors"
.Vb 2
\&    Error: agent is not running [LINENO]"
\&    Error: not found: $cgEnvFile [LINENO]"
.Ve
.SS "Key add errors or warnings"
.IX Subsection "Key add errors or warnings"
.Vb 2
\&    Error: cgAgentOwner override cannot be used to add keys [LINENO]
\&    Warning: KEY has no password!!! [LINENO]"
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For these examples the private keys are located in ~/.ssh/.  For
better security put your private keys on a \s-1USB\s0 drive which would only
be mounted when you add a key to your ssh-agent.
.IP "\(bu" 4
The first time you login to your computer, run sshagent to authenticate
your ssh keys for the agent. Or put this in your profile. That way
You will only need to do this when the computer started or rebooted.
.Sp
.Vb 5
\&    if ! pgrep ssh\-agent &>/dev/null; then
\&        . sshagent ~/.ssh/id.home ~/.ssh/id.work
\&    else
\&        . sshagent \-s
\&    fi
.Ve
.IP "\(bu" 4
You ran sshagent to create an agent, but you forgot to \*(L"source\*(R" the
script so that the SSH_* env. are not set.  Just run '. sshagent \-s'
.IP "\(bu" 4
In a profile script add this line. That way when you start a new
terminal it will use any keys from the agent. This can also be
put in a script if it needs the keys saved on the agent.
.Sp
.Vb 1
\&    . sshagent \-s
.Ve
.IP "\(bu" 4
In a script run by the 'root' user:
.Sp
.Vb 2
\&    export $cgAgentOwner=george
\&    . sshagent \-s
.Ve
.Sp
If you used sudo to change to root user, cgAgentOwner will be set to
\&\f(CW$SUDO_USER\fR
.IP "\(bu" 4
Add another key to a running agent:
.Sp
.Vb 1
\&    . sshagent ~/.ssh/id_foo_rsa
.Ve
.IP "\(bu" 4
Kill all your agents. This would be a good practice if you don't want
your keys \*(L"active\*(R" on the computer.
.Sp
.Vb 1
\&    . sshagent \-k
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.Vb 7
\&    cgAgentOwner \- user name. Default: $USER
\&    cgEnvFile \- sshagent env. file. Default: /home/$USER/.ssh/.sshagent.env
\&    gpDebug \- set to debug level (use before getops \-x option)
\&    SSH_AGENT_PID \- set by ssh\-agent
\&    SSH_AUTH_SOCK \- set by ssh\-agent
\&    HOME \- set by OS. The usual default: /home/$USER
\&    USER \- set by OS
.Ve
.SH "FILES"
.IX Header "FILES"
.Vb 1
\&    /home/$cgAgentOwner/.ssh/.sshagent.env
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&    ssh\-agent, ssh\-add, sshagent\-test, ssh\-askpass, shunit2.1
.Ve
.SH "NOTES"
.IX Header "NOTES"
.SS "Security"
.IX Subsection "Security"
.IP "\(bu" 4
\&\fB\s-1DO NOT USE PASSWORDLESS KEYS\s0 for ssh or gpg!\fR The \s-1ONLY\s0 exception
might be for a production server that might be rebooted when no one
would be around to authenticate the keys. If you do use passwordless
keys, then make sure the keys are \s-1ONLY\s0 used on production, the
permissions prevent copying the keys, and the keys are
\&\*(L"managed\*(R". I.e. the keys are not in any non-production user's account,
\&\s-1AND\s0 they are regularly rotated. Of course, with passwordless keys
there is no need for ssh-agent.
.IP "\(bu" 4
If the account of the root user or the owner of the ssh-agent is
\&\*(L"cracked\*(R", then all of the keys on the agent will be compromised.
.IP "\(bu" 4
Tip: if ssh keys are \*(L"shared\*(R", each user should change the password,
on their copy of the key, to one that only they know.
.SS "Help Text Format"
.IX Subsection "Help Text Format"
You can output this help text in different formats, if you have these
other pod programs. For example:
.PP
.Vb 4
\&    pod2html \-\-title="sshagent" sshagent >sshagent.html
\&    pod2markdown sshagent >sshagent.md
\&    pod2man sshagent >sshagent.man
\&    pod2pdf \-\-margins=36 \-\-outlines sshagent >sshagent.pdf
.Ve
.SS "Test Driven Development"
.IX Subsection "Test Driven Development"
For \s-1TDD\s0 you can find the latest versions of sshagent and sshagent-test
at:
github <https://github.com/TurtleEngr/my-utility-scripts/tree/main/bin>
.SH "CAVEATS"
.IX Header "CAVEATS"
.IP "\(bu" 4
There could be conflicts with an ssh-agent that started by an X11
session manager. This script is designed to work on headless services
or workstations, \fIacross sessions.\fR So if an ssh-agent process
already exists, before using this script, you'll need to track down
where it is being started, and prevent it from starting. For example,
on my Linux laptop I removed \*(L"use-ssh-agent\*(R" from file
/etc/X11/Xsession.options
.IP "\(bu" 4
The \f(CW$cgAgentOwner\fR option for using another user's agent will only work
for the root user, because ssh will only work if the ~/.ssh/ directory
is only readable by its owner. If non-root users need to share the
ssh-agent, then put put the .sshagent.env in a location that only
those users can read, using \*(L"group\*(R" permissions. See the cgEnvFile
variable.
.IP "\(bu" 4
The weird coding style of using functions, gErr, and returns, is done
to avoid using \*(L"exit,\*(R" which would exit the active process (i.e. the
terminal or a calling script).
.SH "BUGS"
.IX Header "BUGS"
When ssh-agent is active it will send each of the keys to a ssh
command, until one works. This could cause problems. For example what
if you have a rate limit of only 3 login attempts over a one minute
period.  If the \*(L"correct\*(R" key is not one of the first 3 on the agent,
then ssh will always fail.
.SH "RESTRICTIONS"
.IX Header "RESTRICTIONS"
sshagent only works well with bash.
.SH "AUTHOR"
.IX Header "AUTHOR"
TurtleEngr
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW$Revision:\fR 1.91 $
