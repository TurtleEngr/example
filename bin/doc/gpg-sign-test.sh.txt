========================================
NAME gpg-sign-test.sh
    Test the sshagent script.

SYNOPSIS
        gpg-sign-test.sh -T all
        gpg-sign-test.sh -T list
        gpg-sign-test.sh [-h] [-H pStyle] [-T pTest]

DESCRIPTION
    This script is used to test gpg-sign.sh and See the Notes section for
    how to set it up and the dependent scipts.

OPTIONS
    -h  Output this "long" usage help. See "-H long"

    -H pStyle
        pStyle is used to select the type of help and how it is formatted.

        Styles:

            short|usage - Output short usage help as text.
            long|text   - Output long usage help as text.
            man         - Output long usage help as a man page.
            html        - Output long usage help as html.
            md          - Output long usage help as markdown.

    -T "pTest"
        "-T all" will run all of the functions that begin with "test".

        "-T list" will list all of the test functions.

        Otherwise, pTest should be a space separated list of test function
        names, between the quotes.

ENVIRONMENT
    HOME, USER

SEE ALSO
    gpg-sign.sh, just-words.pl, gpg, shunit2.1, shellcheck

NOTES
  Dependencies
    *   The latest versions of gpg-sign.sh, gpg-sign-test.sh, just-words.pl,
        and shunit2.1 can be found at:

        github TurtleEngr
        <https://github.com/TurtleEngr/my-utility-scripts/tree/main/bin> or
        at github TurtleEngr
        <https://github.com/TurtleEngr/example/tree/photographic-evidence-is
        -dead/bin>

    *   For more details about shunit2 (shunit2.1) see
        shunit2/shunit2-manual.html Source
        <https://github.com/kward/shunit2>

        shunit2.1 has a minor change to fix up colors when background is not
        black.

  Test Outline
    *   If ~/.cache/gpg-sign-test (with the test sample files) is not found
        then it will be created by this script. Also a test gpg homedir and
        test key will be created.

        To be sure everything is up-to-date with the tests, you can remove
        all of ~/.cache/gpg-sign-test so it will be rebuilt.

    *   Test just-words.pl

        Test gpg-sign.sh -c

          c-result-test-page.txt.sig

        Test gpg-sign.sh -s

          s-result-test-page.txt.sig

    + bin/ + gpg-sign.sh + gpg-sign-test.sh + test/ + test.pri + test.pub +
    test-page.html + test-page.txt

AUTHOR
    TurtleEngr

HISTORY
    $Revision: 1.13 $ $Date: 2024/11/22 20:28:18 $ GMT

    EOF

        # ../sample/test.pub
        cat <<EOF >$cgTestDir/gnupg/test.pub
    -----BEGIN PGP PUBLIC KEY BLOCK-----

    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
    j72PELMCQQ== =dQKf -----END PGP PUBLIC KEY BLOCK----- EOF echo "gpg
    $cgTestOpt $cgTestPass --import $cgTestDir/gnupg/test.pri
    $cgTestDir/gnupg/test.pub" >$cgTestDir/fCreateKey.output gpg $cgTestOpt
    $cgTestPass --import $cgTestDir/gnupg/test.pri $cgTestDir/gnupg/test.pub
    >>$cgTestDir/fCreateKey.output 2>&1 if ! gpg $cgTestOpt --list-key
    test@example.com &>/dev/null; then echo "Error: test.pub key could not
    be defined. [$LINENO]" exit 1 fi if ! gpg $cgTestOpt --list-secret-key
    test@example.com &>/dev/null; then echo "Error: test.pri key could not
    be defined. [$LINENO]" exit 1 fi } # fCreateKey

    # ======================================== # Tests

    # -------------------------------- oneTimeSetUp() { # Unset gpTest to
    prevent infinite loop gpTest=''

        if [[ -d $cgTestDir/gnupg ]]; then
            return 0
        fi
    
        mkdir -p $cgTestDir/gnupg &>/dev/null
        chmod -R go= $cgTestDir
        fCreateTestPage
        fCreateKey

        chmod -R go= $cgTestDir

        return 0
    } # oneTimeSetUp

    # -------------------------------- oneTimeTearDown() { if [[
    ${__shunit_assertsFailed} -eq 0 ]]; then rm -rf $cgTestDir fi

        return 0
    } # oneTearDown

    # -------------------------------- setUp() { cd $cgCurDir
    cgGpgOpt="$cgTestOpt"

        return 0
    } # setUp

    # -------------------------------- tearDown() { cd $cgCurDir rm
    $cgTestDir/test-page.txt.sig 2>/dev/null return 0 } # tearDown

    # ========================================

    testSetup() { assertTrue "[$LINENO] gpg-sign.sh" "[ -x gpg-sign.sh ]"
    assertTrue "[$LINENO] just-words.pl" "[ -x just-words.pl ]" assertTrue
    "[$LINENO] org2html.shh" "[ -x org2html.sh ]" assertTrue "[$LINENO]
    test-page.html" "[ -r $cgTestDir/test-page.html ]" assertTrue "[$LINENO]
    BEGIN" "grep -q -- '--BEGIN TEXT--' $cgTestDir/test-page.html ]"
    assertTrue "[$LINENO] test-page.txt" "[ -r $cgTestDir/test-page.txt ]"
    assertFalse "[$LINENO]" "grep -q -- '--BEGIN TEXT--'
    $cgTestDir/test-page.txt ]"

        assertTrue "[$LINENO] test-simple.html" "[ -r $cgTestDir/test-simple.html ]"
    
        assertTrue "[$LINENO] gnupg/" "[ -d $cgTestDir/gnupg ]"
        assertTrue "[$LINENO]" "[ -r $cgTestDir/gnupg/test.pri ]"
        assertTrue "[$LINENO]" "[ -r $cgTestDir/gnupg/test.pub ]"
        assertTrue "[$LINENO]" "[ -w $cgTestDir/gnupg/pubring.kbx ]"
        assertTrue "[$LINENO]" "[ -w $cgTestDir/gnupg/trustdb.gpg ]"
    
        assertTrue "[$LINENO] pub key" "gpg $cgGpgOpt --list-key test@example.com &>/dev/null"
        assertTrue "[$LINENO] pri key" "gpg $cgGpgOpt --list-secret-key test@example.com &>/dev/null"

        return 0
    } # testSetup

    # -------------------------------- testUsageOK() { local tResult

        tResult=$($cgScript -h 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "DESCRIPTION"

        tResult=$($cgScript -H html 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "<title>gpg-sign.sh</title>"

        return 0
    } # testUsageOK

    # -------------------------------- testUsageError() { local tResult

        tResult=$($cgScript 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: -f FILE option is required"
        assertContains "[$LINENO] $tResult" "$tResult" "Usage:"

        tResult=$($cgScript -U 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: Unknown option: -U"
        assertContains "[$LINENO] $tResult" "$tResult" "Usage:"

        tResult=$($cgScript -H 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: Value required for option: -H"

        return 0
    } # testUsageError

    # -------------------------------- testJustWordsOK() { local tResult

        tResult=$($cgCurDir/just-words.pl <$cgTestDir/test-simple.html)
        assertContains "[$LINENO] $tResult" "$tResult" "Text body line 1. Line 2 End."
        assertNotContains "[$LINENO] $tResult" "$tResult" "BEGIN TEXT"
        assertNotContains "[$LINENO] $tResult" "$tResult" "END TEXT"
        assertNotContains "[$LINENO] $tResult" "$tResult" "Not signed part"
    
        return 0
    } # testJustWordsOK

    # -------------------------------- testSignOK() { local tResult

        cgGpgOpt="$cgTestOpt $cgTestPass"
        cd $cgTestDir

        tResult=$($cgScript -c -k test@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Signed file: test-page.txt.sig"
        assertContains "[$LINENO] $tResult" "$tResult" "gpg: using \"test@example.com\" as default secret key for signing"
        assertTrue "[$LINENO]" "[ -f $cgTestDir/test-page.txt.sig ]"
        assertTrue "[$LINENO]" "grep -q 'BEGIN PGP SIGNED MESSAGE' $cgTestDir/test-page.txt.sig"
        assertTrue "[$LINENO]" "grep -q 'Four score and seven years ago' $cgTestDir/test-page.txt.sig"
        assertTrue "[$LINENO]" "grep -q 'BEGIN PGP SIGNATURE' $cgTestDir/test-page.txt.sig"
        assertTrue "[$LINENO]" "grep -q 'END PGP SIGNATURE' $cgTestDir/test-page.txt.sig"
        assertTrue "[$LINENO]" "grep -q 'wiki/Gettysburg_Address' $cgTestDir/test-page.txt.sig"

        return 0
    } # testSignOK

    # -------------------------------- testSignError() { local tResult

        cgGpgOpt="$cgTestOpt $cgTestPass"
        cd $cgTestDir

        tResult=$($cgScript -c -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: -k KEY option is required"

        tResult=$($cgScript -c -k test-bad@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: test-bad@example.com private key was not found"

        tResult=$($cgScript -c -k test-bad@example.com -f test-page-bad.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: Cannot find or read: test-page-bad.txt"

        cgGpgOpt="$cgTestOpt ${cgTestPass}BAD"
        tResult=$($cgScript -c -k test-bad@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: test-bad@example.com private key was not found"

        return 0
    } # testSignError

    # -------------------------------- testSignDetachedOK() { local tResult

        cgGpgOpt="$cgTestOpt $cgTestPass"
        cd $cgTestDir

        tResult=$($cgScript -s -k test@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Signature file: test-page.txt.sig"
        assertContains "[$LINENO] $tResult" "$tResult" "gpg: using \"test@example.com\" as default secret key for signing"

        assertTrue "[$LINENO]" "[ -f $cgTestDir/test-page.txt.sig ]"
        assertTrue "[$LINENO]" "grep -q 'BEGIN PGP SIGNATURE' $cgTestDir/test-page.txt.sig"
        assertTrue "[$LINENO]" "grep -q 'END PGP SIGNATURE' $cgTestDir/test-page.txt.sig"

        return 0
    } # testSignDetachedOK

    # -------------------------------- testSignDetachedError() { local
    tResult

        cgGpgOpt="$cgTestOpt ${cgTestPass}"
        cd $cgTestDir

        tResult=$($cgScript -s -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: -k KEY option is required"

        tResult=$($cgScript -s -k test-bad@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: test-bad@example.com private key was not found"

        tResult=$($cgScript -s -k test-bad@example.com -f test-page-bad.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: Cannot find or read: test-page-bad.txt"

        cgGpgOpt="$cgTestOpt ${cgTestPass}BAD"
        tResult=$($cgScript -s -k test-bad@example.com -f test-page.txt 2>&1)
        assertContains "[$LINENO] $tResult" "$tResult" "Error: test-bad@example.com private key was not found"

        return 0
    } # testSignDetachedError

    # ------------------- # This should be the last defined function
    fRunTests() { if [ "$gpTest" = "list" ]; then grep 'test.*()' $0 | grep
    -v grep | sed 's/()//g' exit $? fi SHUNIT_COLOR=always if [ "$gpTest" =
    "all" ]; then gpTest="" # shellcheck disable=SC1091 . shunit2.1 exit $?
    fi # shellcheck disable=SC1091 . shunit2.1 -- $gpTest

        exit $?
    } # fRunTests

    # ======================================== # Main

    if [ $# -eq 0 ]; then echo "Error: Missing options. [$LINENO]"
    fUsageTest short fi

    while getopts :hH:T: tArg; do case $tArg in h) fUsageTest long ;; H)
    fUsageTest "$OPTARG" ;; T) gpTest="$OPTARG" ;; # Problem arguments :)
    echo "Error: Value required for option: -$OPTARG [$LINENO]" fUsageTest
    short ;; \?) echo "Error: Unknown option: $OPTARG [$LINENO]" fUsageTest
    short ;; esac done shift $((OPTIND - 1)) if [ $# -ne 0 ]; then echo
    "Unknown option: $* [$LINENO]" fUsageTest short fi

    # Set current directory location if [ -z "$PWD" ]; then PWD=$(pwd) fi
    cgCurDir=$PWD

    cgScript=$PWD/gpg-sign.sh if [[ ! -x ${cgScript%/*} ]]; then echo
    "Error: You need to be cd'ed to bin/ where $cgScript is located.
    [$LINENO]" fUsageTest short fi

    # ------------------- if [ -n "$gpTest" ]; then fRunTests fi

    echo "Error: Missing options [$LINENO]" fUsageTest short

    exit 1

