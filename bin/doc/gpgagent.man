.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2024-12-13" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
gpgagent \- setup the gpg and ssh agent process
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& . gpgagent [\-h] [\-a] [\-s] [\-k] [key ...]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
gpgagent is a wrapper for gpg-agent, ssh-add, and gpg.  Notice that
the script is \*(L"sourced\*(R" (.) so that the env. var. are defined.
.PP
If there are no option flags, any running agents owned by you (or the
\&\f(CW$cgAgentOwner\fR) are killed, and a new agent is started, adding any of
the keys passed.
.PP
For the best use of gpgagent, put your public keys in the
~/.ssh/authorized_keys file on all the systems that you have login
access to.
.PP
If the directory /home/$cgAgentOwner/.gnupg is group or other read or
writable, gpgagent will exit with an error
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
This help.
.IP "\fB\-a\fR" 4
.IX Item "-a"
Connect to the existing agent, and add the passed keys.
.IP "\fB\-s\fR" 4
.IX Item "-s"
Only set env. var. (don't run a new agent).  Fails if there is no
\&.gpg\-agent\-info file.
.IP "\fB\-k\fR" 4
.IX Item "-k"
Kill all agents owned by you, and remove the .gpg\-agent\-info file.
.IP "\fBkey...\fR" 4
.IX Item "key..."
A list of key file names and/or gpg keys.  Keys with a '@' in them
will be treated as gpg keys.  All other keys will be treated as ssh
private key files.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
.SH "ERRORS"
.IX Header "ERRORS"
.SH "EXAMPLES"
.IX Header "EXAMPLES"
In a profile script:
.PP
.Vb 1
\&        . gpgagent ~/.ssh/id.home ~/.ssh/id.work
.Ve
.PP
In a script run by the 'root' user:
.PP
.Vb 2
\&        export $cgAgentOwner=george
\&        . gpgagent \-s
.Ve
.PP
You ran gpgagent manually to create an agent, but you forgot to
\&\*(L"source\*(R" the script so that the SSH_* env. are set.  Fix this by just
running gpgagent with the \-s option:
.PP
.Vb 1
\&        . gpgagent \-s
.Ve
.PP
Add another ssh key to a running agent:
.PP
.Vb 1
\&        gpgagent \-a ~/.ssh/id_foo_dsa
.Ve
.PP
Add another gpg key to a running agent:
.PP
.Vb 1
\&        gpgagent \-a joe@yahoo.com
.Ve
.PP
List agent and added keys:
.PP
.Vb 1
\&        ssh\-add \-l
.Ve
.PP
Kill all agents:
.PP
.Vb 1
\&        gpgagent \-k
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.Vb 1
\& $cgAgentOwner \- user name.  Set to $LOGNAME if empty.
\&
\& $GPG_AGENT_INFO \- set by gpgagent
\& $SSH_AUTH_SOCK \- set by gpgagent
\& $SSH_AGENT_PID \- set by gpgagent
.Ve
.SH "FILES"
.IX Header "FILES"
.Vb 2
\& /home/$cgAgentOwner/.gnupg/.gpg\-agent\-info
\& $HOME/.gnupg/gpg\-agent.conf
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& gpg\-agent, gpg, ssh\-add, pinentry\-qt
.Ve
.SH "NOTES"
.IX Header "NOTES"
Because this script is usually sourced, exits and functions are not
used.  So that is why the \*(L"if\*(R" logic in this script is so messy with
the pExit flag.
.SH "CAVEATS"
.IX Header "CAVEATS"
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.SH "BUGS"
.IX Header "BUGS"
.SH "RESTRICTIONS"
.IX Header "RESTRICTIONS"
gpgagent only works well with bash.
.SH "AUTHOR"
.IX Header "AUTHOR"
.SH "HISTORY"
.IX Header "HISTORY"
(c) Copyright 2009 by TrustedID
.PP
\&\f(CW$Revision:\fR 1.5 $ \s-1GMT\s0
