.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2024-12-14" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME sshagent-test"
.IX Header "NAME sshagent-test"
Test the sshagent script.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    sshagent\-test \-T all
\&    sshagent\-test \-T list
\&    sshagent\-test [\-h] [\-H pStyle] [\-T pTest]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to test the sshagent script. See the Notes section
for how to set it up and the dependent scipts.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
Output this \*(L"long\*(R" usage help. See \*(L"\-H long\*(R"
.IP "\fB\-H pStyle\fR" 4
.IX Item "-H pStyle"
pStyle is used to select the type of help and how it is formatted.
.Sp
Styles:
.Sp
.Vb 5
\&    short|usage \- Output short usage help as text.
\&    long|text   \- Output long usage help as text.
\&    man         \- Output long usage help as a man page.
\&    html        \- Output long usage help as html.
\&    md          \- Output long usage help as markdown.
.Ve
.ie n .IP "\fB\-T ""pTest""\fR" 4
.el .IP "\fB\-T ``pTest''\fR" 4
.IX Item "-T pTest"
"\fB\-T all\fR\*(L" will run all of the functions that begin with \*(R"test".
.Sp
"\fB\-T list\fR" will list all of the test functions.
.Sp
Otherwise, \fBpTest\fR should be a space separated list of test function
names, between the quotes.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
\&\s-1HOME, USER\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ssh-agent, ssh, ssh-askpass, shunit2.1, shellcheck
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
For more details about shunit2 (or shunit2.1), see
shunit2/shunit2\-manual.html Source <https://github.com/kward/shunit2>
.Sp
shunit2.1 has a minor change to fix up colors when background is not black.
.IP "\(bu" 4
The latest versions of sshagent, sshagent-test, and shunit2.1 can be
found at:
github TurtleEngr <https://github.com/TurtleEngr/my-utility-scripts/tree/main/bin>
.IP "\(bu" 4
sshagent-test will kill all of your running ssh-agent processes before
and after running.
.IP "\(bu" 4
sshagent-test requires a non X11 /bin/ssh\-askpass
.Sp
Create this substitute:
.Sp
.Vb 6
\&    cat <<EOF >~/bin/ssh\-askpass
\&    #!/bin/bash
\&    read \-t 5 \-p "ssh password? "
\&    echo $REPLY
\&    EOF
\&    chmod a+rx,go\-w ~/bin/ssh\-askpass
.Ve
.Sp
You can replace the system's ssh-askpass, or you can change your path
so it finds ssh-askpass in your bin dir.
.RS 4
.IP "1. Replace the system's ssh-askpass. As root:" 4
.IX Item "1. Replace the system's ssh-askpass. As root:"
.Vb 5
\&   sudo \-s
\&   mv \-i /usr/bin/ssh\-askpass /usr/bin/ssh\-askpass.sav
\&   cp /home/$SUDO_USER/bin/ssh\-askpass /usr/bin
\&   chmod a+rx,go\-w /usr/bin/ssh\-askpass
\&   exit
.Ve
.IP "2. Change your path so ~/bin is look in first:" 4
.IX Item "2. Change your path so ~/bin is look in first:"
.Vb 2
\&   ed ~/.bash_profile
\&   PATH=$HOME/bin:$PATH
.Ve
.Sp
If you still get the ssh-askass popup, you'll need to use option 1, or
you can give the test key's password 'foobar' at every prompt.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
TurtleEngr
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW$Revision:\fR 1.13 $ \f(CW$Date:\fR 2024/11/22 20:28:18 $ \s-1GMT\s0
