.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "STDIN 1"
.TH STDIN 1 "2024-12-17" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME gpg\-sign\-test.sh"
.IX Header "NAME gpg-sign-test.sh"
Test the sshagent script.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    gpg\-sign\-test.sh \-T all
\&    gpg\-sign\-test.sh \-T list
\&    gpg\-sign\-test.sh [\-h] [\-H pStyle] [\-T pTest]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to test gpg\-sign.sh and 
See the Notes section
for how to set it up and the dependent scipts.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-h\fR" 4
.IX Item "-h"
Output this \*(L"long\*(R" usage help. See \*(L"\-H long\*(R"
.IP "\fB\-H pStyle\fR" 4
.IX Item "-H pStyle"
pStyle is used to select the type of help and how it is formatted.
.Sp
Styles:
.Sp
.Vb 5
\&    short|usage \- Output short usage help as text.
\&    long|text   \- Output long usage help as text.
\&    man         \- Output long usage help as a man page.
\&    html        \- Output long usage help as html.
\&    md          \- Output long usage help as markdown.
.Ve
.ie n .IP "\fB\-T ""pTest""\fR" 4
.el .IP "\fB\-T ``pTest''\fR" 4
.IX Item "-T pTest"
"\fB\-T all\fR\*(L" will run all of the functions that begin with \*(R"test".
.Sp
"\fB\-T list\fR" will list all of the test functions.
.Sp
Otherwise, \fBpTest\fR should be a space separated list of test function
names, between the quotes.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
\&\s-1HOME, USER\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
gpg\-sign.sh, just\-words.pl, gpg, shunit2.1, shellcheck
.SH "NOTES"
.IX Header "NOTES"
.SS "Dependencies"
.IX Subsection "Dependencies"
.IP "\(bu" 4
The latest versions of gpg\-sign.sh, gpg\-sign\-test.sh, just\-words.pl,
and shunit2.1 can be found at:
.Sp
github TurtleEngr <https://github.com/TurtleEngr/my-utility-scripts/tree/main/bin>
or at
github TurtleEngr <https://github.com/TurtleEngr/example/tree/photographic-evidence-is-dead/bin>
.IP "\(bu" 4
For more details about shunit2 (shunit2.1) see
shunit2/shunit2\-manual.html
Source <https://github.com/kward/shunit2>
.Sp
shunit2.1 has a minor change to fix up colors when background is not
black.
.SS "Test Outline"
.IX Subsection "Test Outline"
.IP "\(bu" 4
If ~/.cache/gpg\-sign\-test (with the test sample files) is not found
then it will be created by this script. Also a test gpg homedir and
test key will be created.
.Sp
To be sure everything is up-to-date with the tests, you can remove all
of ~/.cache/gpg\-sign\-test so it will be rebuilt.
.IP "\(bu" 4
Test just\-words.pl
.Sp
Test gpg\-sign.sh \-c
.Sp
.Vb 1
\&  c\-result\-test\-page.txt.sig
.Ve
.Sp
Test gpg\-sign.sh \-s
.Sp
.Vb 1
\&  s\-result\-test\-page.txt.sig
.Ve
.PP
+ bin/
  + gpg\-sign.sh
  + gpg\-sign\-test.sh
+ test/
  + test.pri
  + test.pub
  + test\-page.html
  + test\-page.txt
.SH "AUTHOR"
.IX Header "AUTHOR"
TurtleEngr
.SH "HISTORY"
.IX Header "HISTORY"
\&\f(CW$Revision:\fR 1.13 $ \f(CW$Date:\fR 2024/11/22 20:28:18 $ \s-1GMT\s0
